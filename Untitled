_        Console.WriteLine("_        state = (MeshState)((int)state + 1);_        GD.PrintRaw($"StructureDatabase {StrDb}");_StructureDatabase_            GD.PrintErr($"Error in DeformMesh: {e.Message}\n{e.StackTrace}");_CRITICAL_            Logger.Error($"DeformMesh Error: {e.Message}\n{e.StackTrace}");_    } catch (Exception e)_        StrDb.IncrementMeshState();_                Edge[] edgesWithPoint = StrDb.GetEdgesFromPoint(p);_                    triEdge3 = StrDb.AddEdge(sharedPoint2, t1UnsharedPoint, index);_                    index = otherEdgesT2[1].Index;_                    triEdge2 = StrDb.AddEdge(sharedPoint2, t2UnsharedPoint, index);_                    index = otherEdgesT2[0].Index;_                    Edge triEdge3 = StrDb.AddEdge(sharedPoint1, t2UnsharedPoint, index);_                    index = otherEdgesT1[1].Index;_                    index = otherEdgesT1[0].Index;_                    Edge triEdge2 = StrDb.AddEdge(sharedPoint1, t1UnsharedPoint, otherEdgesT1[0].Index);_                    Edge sharedTriEdge = StrDb.AddEdge(t1UnsharedPoint, t2UnsharedPoint, e.Index);_        return returnEdge;_        AddEdge(returnEdge);_        Edge returnEdge = new Edge(p1, p2);_        Logger.EnterFunction("AddEdge", $"MeshState: {state}, From {p1} to {p2} with index {index}");_        Logger.EnterFunction("AddEdge", $"MeshState: {state}, From {p1} to {p2}");_        Logger.EnterFunction("AddEdge", $"MeshState: {state}, From {p1} to {p2}");_            AddEdge(returnEdge);_        lock (lockObject)_        Logger.EnterFunction("AddEdge", $"MeshState: {state}, edgeIndex={Edges.Count}");_    public Edge AddEdge(Point p1, Point p2)_                case MeshState.DualMesh:_                case MeshState.BaseMesh:_                case MeshState.Ungenerated:_            switch (state) {_        lock (lockObject)_        Logger.EnterFunction("AddPoint", $"MeshState: {state}, pointIndex={p.Index}");_                case MeshState.DualMesh:_                case MeshState.BaseMesh:_                case MeshState.Ungenerated:_            switch (state)_        lock (lockObject)_        Logger.EnterFunction("AddEdge", $"MeshState: {state}, edgeIndex={edge.Index}");_    public void AddEdge(Edge edge)_                case MeshState.Ungenerated:_                case MeshState.DualMesh:_                case MeshState.BaseMesh:_            switch (state)_        lock (lockObject)_MeshState_        Logger.EnterFunction("AddTriangle", $"triIndex={triangle.Index}");_                        EdgesFrom.Add(e);_                    foreach (Edge e in baseEdgesToPoint)_                if (found)_                found = HalfEdgesTo.TryGetValue(p, out HashSet<Edge> baseEdgesToPoint);_                        EdgesFrom.Add(e);_                    foreach (Edge e in baseEdgesFromPoint)_                if (found)_                var found = HalfEdgesFrom.TryGetValue(p, out HashSet<Edge> edgesFromPoint);_HalfEdgesFrom_HalfEdges_HalfEdgesTo_            case MeshState.DualMesh:_            case MeshState.BaseMesh:_        switch (state)_        if(state == MeshState.DualMesh)_        state++;_    public void SetBaseMeshState()_    public MeshState MeshState = MeshState.Ungenerated;_    public MeshState MeshState = MeshState.Un__GetBaseEdgesFromPoint_        return edges.ToArray();_        List<Edge> edges = new List<Edge>(EdgesFrom);_        return EdgesFrom.ToArray();_                EdgesFrom.Add(e);_            foreach (Edge e in edgesToPoint) {_        if (found){_        found = HalfEdgesTo.TryGetValue(p, out HashSet<Edge> edgesToPoint);_                EdgesFrom.Add(e);_            foreach (Edge e in edgesFromPoint)_        if (found)_        var found = HalfEdgesFrom.TryGetValue(p, out HashSet<Edge> edgesFromPoint);_        HashSet<Edge> EdgesFrom = new HashSet<Edge>();_            continentCount++;_continentCount_con_continentCount_        for (int i = 0; i < continents.Count; i++)_            BiomeThreader[continentIndex] = biomeThread;_        Task[] BiomeThreader = new Task[continents.Count];_                HashSet<Edge> edgesWithPoint = StrDb.HalfEdgesFrom[p].ToHashSet();
